/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package businessmanagement.userInterface;

import businessmanagement.Business.Business;
import businessmanagement.CustomerManagement.CustomerProfile;
import businessmanagement.MarketModel.Channel;
import businessmanagement.MarketModel.Market;
import businessmanagement.OrderManagement.Order;
import businessmanagement.ProductManagement.Product;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 43999
 */
public class GoShoppingPane extends javax.swing.JPanel {

    /**
     * Creates new form GoShoppingPane
     */
    Business business;
    CustomerProfile customerProfile;
    public GoShoppingPane(Business b, CustomerProfile cp) {
        initComponents();
        business = b;
        customerProfile = cp;
        populateProductTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ProductsTable = new javax.swing.JTable();
        SearchSupplierInputText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SearchProductInputText = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        PriceRangeMinInputText = new javax.swing.JTextField();
        PriceRangeMaxInputText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        BuyButton = new javax.swing.JButton();
        AddToCartButton = new javax.swing.JButton();
        ShowAllButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("宋体", 0, 24)); // NOI18N
        jLabel1.setText("Market Place");

        ProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Price", "Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ProductsTable);
        if (ProductsTable.getColumnModel().getColumnCount() > 0) {
            ProductsTable.getColumnModel().getColumn(0).setResizable(false);
            ProductsTable.getColumnModel().getColumn(1).setResizable(false);
            ProductsTable.getColumnModel().getColumn(2).setResizable(false);
        }

        SearchSupplierInputText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N

        jLabel4.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel4.setText("Search by supplier:");

        jLabel5.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel5.setText("Search by product:");

        SearchProductInputText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N

        SearchButton.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel2.setText("Price range:");

        PriceRangeMinInputText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        PriceRangeMinInputText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceRangeMinInputTextActionPerformed(evt);
            }
        });

        PriceRangeMaxInputText.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("宋体", 0, 36)); // NOI18N
        jLabel3.setText("~");

        BuyButton.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        BuyButton.setText("Buy Now");
        BuyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuyButtonActionPerformed(evt);
            }
        });

        AddToCartButton.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        AddToCartButton.setText("Add to Cart");
        AddToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddToCartButtonActionPerformed(evt);
            }
        });

        ShowAllButton.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        ShowAllButton.setText("Show All");
        ShowAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAllButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SearchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BuyButton)
                                .addGap(15, 15, 15))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SearchProductInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SearchSupplierInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ShowAllButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(PriceRangeMinInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel3)
                                        .addGap(8, 8, 8)
                                        .addComponent(PriceRangeMaxInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(AddToCartButton)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SearchSupplierInputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(SearchProductInputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(PriceRangeMinInputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PriceRangeMaxInputText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchButton)
                    .addComponent(BuyButton)
                    .addComponent(AddToCartButton)
                    .addComponent(ShowAllButton))
                .addGap(38, 38, 38))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PriceRangeMinInputTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriceRangeMinInputTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PriceRangeMinInputTextActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        ArrayList<Product> products = new ArrayList();
        String supplierStr = SearchSupplierInputText.getText();
        String productStr = SearchProductInputText.getText();
        String minStr = PriceRangeMinInputText.getText();
        String maxStr = PriceRangeMaxInputText.getText();
        double min = Double.NEGATIVE_INFINITY;
        double max = Double.POSITIVE_INFINITY;
        products.addAll(business.pc.getProductCatalog());
        if(minStr.isEmpty() == false){
            try{
                min = Double.parseDouble(minStr);
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null,"Min price is not number");
            }
        }
        if(maxStr.isEmpty() == false){
            try{
                max = Double.parseDouble(maxStr);
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(null,"Max price is not number");
            }
        }
        
        
        if(supplierStr.isEmpty() == false){
            for(Product product : business.pc.getProductCatalog()){
                if(product.getSupplier().getSupplierName().equals(supplierStr) == false){
                    products.remove(product);
                }
            }
        }
        
        if(productStr.isEmpty() == false){
            for(Product product : business.pc.getProductCatalog()){
                if(product.getName().equals(productStr) == false){
                    products.remove(product);
                }
            }
        }
        
        if(minStr.isEmpty() == false){
            for(Product product : business.pc.getProductCatalog()){
                if(product.getPrice() < min){
                    products.remove(product);
                }
            }
        }
        
        if(maxStr.isEmpty() == false){
            for(Product product : business.pc.getProductCatalog()){
                if(product.getPrice() > max){
                    products.remove(product);
                }
            }
        }
        
        DefaultTableModel dtm = (DefaultTableModel) ProductsTable.getModel();
        dtm.setRowCount(0);
        for(Product product : products){
            Object[] row = new Object[3];
            row[0] = product;
            row[1] = product.getPrice();
            row[2] = product.getSupplier();
            dtm.addRow(row);
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void BuyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuyButtonActionPerformed
        // TODO add your handling code here:
        int row = ProductsTable.getSelectedRow();
        if(row >= 0){
            Product product = (Product) ProductsTable.getValueAt(row,0);
            Market market = customerProfile.getMarket();
            Channel channel = business.cl.searchChannel("Offical website");
            Order order = new Order(market,channel,customerProfile,product,null);
            business.mo.addOrder(order);
            customerProfile.getOrderList().addOrder(order);
            JOptionPane.showMessageDialog(null,"You have purchased " + product + ", your order number is: " + order.getNumber());
        }else{
            JOptionPane.showMessageDialog(null,"Please select a product");
        }
        
    }//GEN-LAST:event_BuyButtonActionPerformed

    private void AddToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddToCartButtonActionPerformed
        // TODO add your handling code here:
        int row = ProductsTable.getSelectedRow();
        if(row >= 0){
            Product product = (Product) ProductsTable.getValueAt(row,0);
            customerProfile.getCart().addProduct(product);
            JOptionPane.showMessageDialog(null,"Product has been added to your cart");
        }else{
            JOptionPane.showMessageDialog(null,"Please select a product");
        }
    }//GEN-LAST:event_AddToCartButtonActionPerformed

    private void ShowAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAllButtonActionPerformed
        // TODO add your handling code here:
        populateProductTable();
    }//GEN-LAST:event_ShowAllButtonActionPerformed

     private void populateProductTable(){
        DefaultTableModel dtm = (DefaultTableModel) ProductsTable.getModel();
        dtm.setRowCount(0);
        for(Product product : business.pc.getProductCatalog()){
            Object[] row = new Object[3];
            row[0] = product;
            row[1] = product.getPrice();
            row[2] = product.getSupplier();
            dtm.addRow(row);
            
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddToCartButton;
    private javax.swing.JButton BuyButton;
    private javax.swing.JTextField PriceRangeMaxInputText;
    private javax.swing.JTextField PriceRangeMinInputText;
    private javax.swing.JTable ProductsTable;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchProductInputText;
    private javax.swing.JTextField SearchSupplierInputText;
    private javax.swing.JButton ShowAllButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
